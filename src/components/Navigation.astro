---
import { getCollection } from 'astro:content';

const docs = await getCollection('docs');
const guides = await getCollection('guides');
const appendix = await getCollection('appendix');
const coreRubrics = await getCollection('coreRubrics');
const managerRubrics = await getCollection('managerRubrics');

const orderSorter = (a, b) => a.data.order - b.data.order;
const levelSorter = (a, b) => (a.data.level > b.data.level ? 1 : -1);

docs.sort(orderSorter);
guides.sort(orderSorter);
appendix.sort(orderSorter);
coreRubrics.sort(levelSorter);
managerRubrics.sort(levelSorter);

const nav = [
  {
    title: 'Home',
    href: '/',
  },
  ...docs.map((doc) => ({
    title: doc.data.title,
    href: `/${doc.id}`,
  })),

  {
    title: 'Core Track',
    children: [
      {
        title: 'Overview',
        href: '/rubrics/core',
      },
      {
        title: 'Capabilities',
        href: '/rubrics/core/capabilities',
      },
      ...coreRubrics.map((rubric) => ({
        title: `${rubric.data.level} ${rubric.data.title}`,
        href: `/rubrics/core/${rubric.data.level.toLowerCase()}`,
      })),
    ],
  },
  {
    title: 'Manager Track',
    children: [
      {
        title: 'Overview',
        href: '/rubrics/manager',
      },
      {
        title: 'Capabilities',
        href: '/rubrics/manager/capabilities',
      },
      ...managerRubrics.map((rubric) => ({
        title: `${rubric.data.level} ${rubric.data.title}`,
        href: `/rubrics/manager/${rubric.data.level.toLowerCase()}`,
      })),
    ],
  },
  {
    title: 'Guides',
    children: guides.map((guide) => ({
      title: guide.data.title,
      href: `/guides/${guide.id}`,
    })),
  },
  {
    title: 'Appendixes',
    children: appendix.map((appendix) => ({
      title: appendix.data.title,
      href: `/appendix/${appendix.id}`,
    })),
  },
  {
    title: 'Contributors & Collaborators',
    href: '/credits',
  },
];
---

<div
  id="sidebar"
  class="overflow-y-auto fixed lg:sticky top-0 left-0 z-20 w-72 h-screen bg-white border-r transform -translate-x-full lg:translate-x-0 transition-transform duration-200 ease-in-out"
>
  <div
    class="flex flex-col h-full bg-gradient-to-l from-stone-100 to-white backdrop-blur-sm border-r border-stone-200"
  >
    <div class="h-16 flex-shrink-0 lg:hidden">
      {/* Sidebar header space for responsive menu */}
    </div>
    <nav class="flex-1 px-4 py-4 space-y-2 overflow-y-auto">
      {
        nav.map((item) =>
          item.children ? (
            <div class="py-2 border-t border-stone-200">
              <span class="block px-3 py-2 text-xs font-semibold tracking-wide text-stone-900 uppercase">
                {item.title}
              </span>
              <div class="mt-1 space-y-1">
                {item.children.map((child) => (
                  <a
                    href={child.href}
                    class="block px-3 py-2 text-sm text-stone-600 rounded-lg hover:bg-stone-200 hover:text-stone-900"
                  >
                    {child.title}
                  </a>
                ))}
              </div>
            </div>
          ) : (
            <div class="">
              <a
                href={item.href}
                class="block px-3 py-2 text-sm text-stone-600 rounded-lg hover:bg-stone-200 hover:text-stone-900"
              >
                {item.title}
              </a>
            </div>
          ),
        )
      }
    </nav>
  </div>
</div>

<script>
  import { isNavOpen } from './stores.js';

  isNavOpen.subscribe((open) => {
    document.getElementById('sidebar')!.classList.toggle('translate-x-0', open);
    document.getElementById('sidebar')!.classList.toggle('lg:translate-x-0', !open);
    document.getElementById('sidebar')!.classList.toggle('-translate-x-full', !open);
  });
</script>
