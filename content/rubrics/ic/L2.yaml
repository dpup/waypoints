level: L2
title: Software Engineer
description: |
  L2 engineers are finding their feet and beginning to spread their wings.
  They're becoming more independent, taking on larger tasks with less guidance.
  They're starting to see the bigger picture, understanding how their work
  impacts users and the business. They're becoming active participants in team
  discussions, offering ideas and asking insightful questions. Their confidence
  is growing, and they're starting to mentor newcomers on the basics.

responsibilities:
  - Contributes effectively to larger, cross-functional projects
  - Understands and considers user needs when implementing features
  - Writes efficient, well-tested code with proper documentation
  - Participates in code reviews and provides constructive feedback
  - Collaborates with product and design teams to refine feature implementations
  - Understands and applies basic performance optimization techniques
  - Demonstrates growing autonomy in task completion

expectations:
  technical:
    exceeds: Designs intuitive, scalable, and well-documented APIs that balances feature implementation with long-term maintainability and clarity.
    meets: Independently implements complete technical solutions with appropriate testing, documentation, and consideration for maintainability.
    misses: Struggles with API design or writing maintainable code. Often requires substantial input from peers or senior engineers to ensure code quality.

  ownership:
    exceeds: Delivers features ahead of schedule with comprehensive test coverage and documentation that becomes a reference for the team.
    meets: Manages complete features through the full development lifecycle. Identifies potential risks early and collaborates effectively with immediate team members to resolve issues.
    misses: Requires frequent oversight to complete tasks, struggles to manage time or deliver on commitments, and may not effectively communicate progress or risks.

  impact:
    exceeds: Proactively considers team priorities and user needs when implementing features, suggesting improvements that increase product value and impact.
    meets: Understands user needs and considers team priorities when implementing features; regularly checks that their work aligns with the product’s objectives.
    misses: Focuses primarily on completing tasks without fully grasping their broader impact on the product or user; needs frequent reminders to consider team priorities.

  collaboration:
    exceeds: Collaborates effectively across teams, offering ideas and contributing to technical discussions. Communicates clearly with cross-functional teams, asking insightful questions to clarify goals.
    meets: Participates actively in team and cross-functional discussions, providing valuable input. Communicates effectively with peers and asks clarifying questions when needed.
    misses: Struggles to communicate clearly with team members or cross-functional partners, leading to confusion or delays. Often fails to ask questions when clarification is needed.

  support:
    exceeds: Seeks feedback proactively and incorporates it into future work. Offers informal help to peers and junior engineers, sharing knowledge and assisting with small tasks.
    meets: Seeks and applies feedback regularly. Begins to provide basic guidance or assistance to peers or junior engineers on tasks they’ve mastered.
    misses: Struggles to seek or apply feedback. Rarely provides support to others and does not contribute to the growth of peers or less experienced engineers

  leadership:
    exceeds: Actively improves personal workflows and begins suggesting small improvements to team processes. Leads oneself by staying organized, prioritizing tasks, and delivering on time.
    meets: Demonstrates growing ownership of their work by improving personal processes and participating in discussions around team workflows. Shows self-leadership in task management.
    misses: Requires guidance to manage tasks and maintain productivity. Rarely contributes to process discussions or suggests ways to improve team or individual workflows.

traits:
  - Take on larger tasks with confidence, ensuring they’re well-tested and documented.
  - Regularly ask for feedback on code reviews and thoughtfully incorporates it to improve their work.
  - Write clear, detailed documentation that’s easy for others to follow, especially on cross-functional projects.
  - Collaborate with product and design teams to refine features, asking smart questions to understand the user impact.
  - Participate actively in team discussions and isn't afraid to offer ideas or raise concerns.
  - Show growing independence, taking on tasks and delivering them with minimal guidance.
  - Follow best practices for version control, keeping branches clean and commits organized.
  - Adapt to team processes quickly, contributing to discussions about improving workflows or tooling.
  - Consistently test their own work thoroughly, ensuring both local and automated tests pass before submitting.
  - Are eager to learn and ask for help when necessary, but show growing confidence in their own decision-making.
  - Meet deadlines consistently and provide regular updates on progress, keeping the team in the loop.

management:
  goal: |
    The primary goal when managing L2 engineers is balancing their growing
    independence with appropriate support, while expanding their impact beyond
    pure technical contribution.

  tips:
    - Provide opportunities to own small features end-to-end
    - Include them in planning and design discussions
    - Encourage them to mentor L1 engineers while providing guidance on how to mentor effectively
    - Help them develop relationships with product and design teams
    - Give them space to make and learn from mistakes
    - Guide them towards seeing the broader context of technical decisions

  areas:
    - System design and architecture considerations
    - Cross-functional collaboration skills
    - Technical communication and documentation
    - Performance optimization and scalability concepts
    - Project planning and estimation
    - Balancing technical debt with feature delivery
    - Code review skills and constructive feedback

  measurement:
    - Look for growing ownership of features and technical decisions
    - Monitor the quality of their mentoring and code reviews
    - Track their ability to identify and solve problems independently
    - Assess their contributions to team discussions and planning
    - Evaluate their understanding of trade-offs in technical decisions

  pitfalls:
    - Providing too much direction on tasks they should figure out independently
    - Not giving enough exposure to business and product context
    - Focusing solely on technical growth while neglecting leadership skills
    - Missing opportunities for them to mentor others
    - Not challenging them with complex enough problems
